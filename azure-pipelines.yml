# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'e329ca84-2625-4929-a6e9-98200443d86b'
  imageRepository: 'productservice'
  containerRegistry: 'acseshop121.azurecr.io'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acseshop121be0c-auth'
  AZURE_CONTAINER_REGISTRY: 'acseshop121'
  PRODUCT_CONTAINER_NAME: 'productservice'
  STORE_CONTAINER_NAME: 'storeimage'
  RESOURCE_GROUP: 'rg-eshop'
  CLUSTER_NAME: 'aks-eshop'
  PRODUCT_DEPLOYMENT_MANIFEST_PATH: './dotnet-kubernetes/backend-deploy.yml'
  STORE_DEPLOYMENT_MANIFEST_PATH: './dotnet-kubernetes/frontend-deploy.yml'
  PRODUCT_DOCKER_PATH: './dotnet-kubernetes/Products/Dockerfile'
  STORE_DOCKER_PATH: './dotnet-kubernetes/Store/Dockerfile'
  buildContext: dotnet-kubernetes

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: '$(PRODUCT_CONTAINER_NAME)'
        Dockerfile: '$(PRODUCT_DOCKER_PATH)'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: '$(Build.SourceVersion)'
        buildContext: $(buildContext)

    - task: Docker@2
      displayName: 'Build and push frontend image to ACR'
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: '$(STORE_CONTAINER_NAME)'
        command: 'buildAndPush'
        Dockerfile: '$(STORE_DOCKER_PATH)'
        tags: '$(Build.SourceVersion)'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'FairyFox5700mslearndotnetcloudnative.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(PRODUCT_DEPLOYMENT_MANIFEST_PATH)
                $(STORE_DEPLOYMENT_MANIFEST_PATH)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

